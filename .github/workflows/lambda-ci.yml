name: Lambda CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'lambda/**'
      - '.github/workflows/lambda-ci.yml'
      - 'package.json'
      - '.npmrc'
      - '*.json'
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    paths:
      - 'lambda/**'
      - '.github/workflows/lambda-ci.yml'
      - 'package.json'
      - '.npmrc'
      - '*.json'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        function: [image-processor, notification-handler]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      working-directory: lambda/${{ matrix.function }}
      run: |
        npm install
        npm test
    
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: coverage-${{ matrix.function }}
        path: lambda/${{ matrix.function }}/coverage
        retention-days: 14

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Clean and install dependencies
      run: |
        # Clean all node_modules and lock files
        rm -rf node_modules package-lock.json
        rm -rf lambda/*/node_modules lambda/*/package-lock.json
        
        # Install root dependencies first
        npm ci || npm install
        
        # Install lambda function dependencies
        cd lambda/image-processor
        npm ci || npm install
        cd ../..
        
        cd lambda/notification-handler
        npm ci || npm install
        cd ../..
    
    - name: Run ESLint
      run: npm run lint

  security:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: |
        cd lambda/image-processor && npm install
        cd ../notification-handler && npm install
    
    - name: Run Snyk on image-processor
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high
        file: lambda/image-processor/package.json
    
    - name: Run Snyk on notification-handler
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high
        file: lambda/notification-handler/package.json

  release:
    needs: [security]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Build Changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: ".github/changelog-config.json"
        commitMode: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body: ${{steps.changelog.outputs.changelog}}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          LICENSE
          README.md 